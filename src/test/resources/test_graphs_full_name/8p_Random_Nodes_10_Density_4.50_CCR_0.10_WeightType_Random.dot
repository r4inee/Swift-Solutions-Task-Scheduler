digraph "Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random" {
	graph ["Duplicate states"=0,
		"Max states in OPEN"=2,
		Modes="60000ms; partial expansion, ; Pruning: processor isomorphism, processor normalisation, task equivalence, equivalent schedule 2, ; \
F-value: new, DRT, ; Optimisation: list scheduling, ",
		"Node concurrency"=-1,
		"Number of processors"=8,
		"Pruned using list schedule length"=9,
		"States removed from OPEN"=10,
		"Time to schedule (ms)"=19,
		"Total idle time"=0,
		"Total schedule length"=2680,
		"Total sequential time"=2680,
		"Total states created"=20
	];
	1	 ["Finish time"=152,
		Processor=0,
		"Start time"=0,
		Weight=152];
	2	 ["Finish time"=354,
		Processor=0,
		"Start time"=152,
		Weight=202];
	1 -> 2	 [Weight=5];
	3	 ["Finish time"=657,
		Processor=0,
		"Start time"=354,
		Weight=303];
	1 -> 3	 [Weight=3];
	4	 ["Finish time"=910,
		Processor=0,
		"Start time"=657,
		Weight=253];
	1 -> 4	 [Weight=5];
	5	 ["Finish time"=1163,
		Processor=0,
		"Start time"=910,
		Weight=253];
	1 -> 5	 [Weight=4];
	6	 ["Finish time"=1517,
		Processor=0,
		"Start time"=1163,
		Weight=354];
	1 -> 6	 [Weight=4];
	7	 ["Finish time"=1618,
		Processor=0,
		"Start time"=1517,
		Weight=101];
	1 -> 7	 [Weight=10];
	8	 ["Finish time"=1770,
		Processor=0,
		"Start time"=1618,
		Weight=152];
	1 -> 8	 [Weight=5];
	9	 ["Finish time"=2225,
		Processor=0,
		"Start time"=1770,
		Weight=455];
	1 -> 9	 [Weight=4];
	10	 ["Finish time"=2680,
		Processor=0,
		"Start time"=2225,
		Weight=455];
	1 -> 10	 [Weight=9];
	2 -> 3	 [Weight=8];
	2 -> 4	 [Weight=6];
	2 -> 5	 [Weight=4];
	2 -> 6	 [Weight=8];
	2 -> 7	 [Weight=2];
	2 -> 8	 [Weight=6];
	2 -> 9	 [Weight=7];
	2 -> 10	 [Weight=4];
	3 -> 4	 [Weight=4];
	3 -> 5	 [Weight=3];
	3 -> 6	 [Weight=10];
	3 -> 7	 [Weight=4];
	3 -> 8	 [Weight=10];
	3 -> 9	 [Weight=4];
	3 -> 10	 [Weight=9];
	4 -> 5	 [Weight=4];
	4 -> 6	 [Weight=7];
	4 -> 7	 [Weight=3];
	4 -> 8	 [Weight=9];
	4 -> 9	 [Weight=8];
	4 -> 10	 [Weight=7];
	5 -> 6	 [Weight=2];
	5 -> 7	 [Weight=9];
	5 -> 8	 [Weight=7];
	5 -> 9	 [Weight=4];
	5 -> 10	 [Weight=3];
	6 -> 7	 [Weight=5];
	6 -> 8	 [Weight=6];
	6 -> 9	 [Weight=7];
	6 -> 10	 [Weight=6];
	7 -> 8	 [Weight=5];
	7 -> 9	 [Weight=9];
	7 -> 10	 [Weight=8];
	8 -> 9	 [Weight=10];
	8 -> 10	 [Weight=8];
	9 -> 10	 [Weight=3];
}
