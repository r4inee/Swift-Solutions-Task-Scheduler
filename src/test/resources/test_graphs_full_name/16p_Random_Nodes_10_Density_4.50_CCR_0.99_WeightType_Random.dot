digraph "Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random" {
	graph ["Duplicate states"=0,
		"Max states in OPEN"=2,
		Modes="60000ms; partial expansion, ; Pruning: processor isomorphism, processor normalisation, task equivalence, equivalent schedule 2, ; \
F-value: new, DRT, ; Optimisation: list scheduling, ",
		"Node concurrency"=-1,
		"Number of processors"=16,
		"Pruned using list schedule length"=9,
		"States removed from OPEN"=10,
		"Time to schedule (ms)"=22,
		"Total idle time"=0,
		"Total schedule length"=274,
		"Total sequential time"=274,
		"Total states created"=20
	];
	1	 ["Finish time"=8,
		Processor=0,
		"Start time"=0,
		Weight=8];
	2	 ["Finish time"=32,
		Processor=0,
		"Start time"=8,
		Weight=24];
	1 -> 2	 [Weight=4];
	3	 ["Finish time"=64,
		Processor=0,
		"Start time"=32,
		Weight=32];
	1 -> 3	 [Weight=9];
	4	 ["Finish time"=96,
		Processor=0,
		"Start time"=64,
		Weight=32];
	1 -> 4	 [Weight=7];
	5	 ["Finish time"=135,
		Processor=0,
		"Start time"=96,
		Weight=39];
	1 -> 5	 [Weight=5];
	6	 ["Finish time"=167,
		Processor=0,
		"Start time"=135,
		Weight=32];
	1 -> 6	 [Weight=6];
	7	 ["Finish time"=206,
		Processor=0,
		"Start time"=167,
		Weight=39];
	1 -> 7	 [Weight=4];
	8	 ["Finish time"=222,
		Processor=0,
		"Start time"=206,
		Weight=16];
	1 -> 8	 [Weight=5];
	9	 ["Finish time"=250,
		Processor=0,
		"Start time"=222,
		Weight=28];
	1 -> 9	 [Weight=7];
	10	 ["Finish time"=274,
		Processor=0,
		"Start time"=250,
		Weight=24];
	1 -> 10	 [Weight=9];
	2 -> 3	 [Weight=3];
	2 -> 4	 [Weight=10];
	2 -> 5	 [Weight=6];
	2 -> 6	 [Weight=8];
	2 -> 7	 [Weight=5];
	2 -> 8	 [Weight=2];
	2 -> 9	 [Weight=2];
	2 -> 10	 [Weight=5];
	3 -> 4	 [Weight=9];
	3 -> 5	 [Weight=7];
	3 -> 6	 [Weight=4];
	3 -> 7	 [Weight=9];
	3 -> 8	 [Weight=6];
	3 -> 9	 [Weight=4];
	3 -> 10	 [Weight=4];
	4 -> 5	 [Weight=7];
	4 -> 6	 [Weight=8];
	4 -> 7	 [Weight=8];
	4 -> 8	 [Weight=4];
	4 -> 9	 [Weight=9];
	4 -> 10	 [Weight=7];
	5 -> 6	 [Weight=8];
	5 -> 7	 [Weight=3];
	5 -> 8	 [Weight=7];
	5 -> 9	 [Weight=3];
	5 -> 10	 [Weight=7];
	6 -> 7	 [Weight=7];
	6 -> 8	 [Weight=10];
	6 -> 9	 [Weight=3];
	6 -> 10	 [Weight=3];
	7 -> 8	 [Weight=7];
	7 -> 9	 [Weight=9];
	7 -> 10	 [Weight=2];
	8 -> 9	 [Weight=8];
	8 -> 10	 [Weight=2];
	9 -> 10	 [Weight=10];
}
